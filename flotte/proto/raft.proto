syntax = "proto3";
package raft;

// RequestVoteRequest is the command used by a candidate to ask a Raft peer for a vote in an election.
message RequestVoteRequest {
  // Term is the new voting term.
  uint64 term = 1;
  // Candidate is the candidate id
  uint64 candidate = 2;
  // LastLogIndex is the last log index.
  uint64 last_log_index = 3;
  // LastLogTerm is the last log term.
  uint64 last_log_term = 4;
}
  
// RequestVoteResponse is the response returned from a RequestVoteRequest.
message RequestVoteResponse {
  // Term is the newer term if the lader is out of date.
  uint64 term = 1;
  // Granted if the vote was granted.
  bool granted = 2;
}

message LogEntry {
	uint64 Index=1;
	uint64 Term=2;
	string CommandName=3;
	bytes Command=4; // for nop-command
}
  
// RequestVoteResponse is the response returned from a RequestVoteRequest.
message AppendEntriesRequest {
  uint64 term = 1;
  uint64 leader_id = 2;
  repeated LogEntry entries = 3;
}

message AppendEntriesResponse {
	uint64 Term=1;
	uint64 Index=2;
 	uint64 CommitIndex=3;
	bool   Success=4;
}


service Raft {
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
}